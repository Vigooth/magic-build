{"version":3,"sources":["webpack:///./src/containers/set.js"],"names":["_react","__webpack_require__","c","y","r","_reactRedux","_index","f","p","_utils","_SetControls","_spinner","e","__esModule","default","Set","onScroll","_this","toggleFilterBarOnTop","x","document","getElementsByClassName","getPosition","classList","add","documentElement","scrollTop","remove","o","isLoading","_this$props","props","set","params","match","_","isEmpty","this","fetchSet","window","addEventListener","key","value","removeEventListener","_props","visibilityFilter","_react2","createElement","Spinner","className","name","SetControls","_cards2","Component","propTypes","PropTypes","object","isRequired","connect","state","filterSet"],"mappings":"sMAAAA,EAAAC,EAAA,GAAAC,EAAAC,EAAAC,GACAC,EAAAJ,EAAA,GACAK,EAAAL,EAAA,IAAAM,EAAAJ,EACAF,EAAA,IAAAO,EAAAL,EACAF,EAAA,MAEAQ,EAAAR,EAAA,KACAS,EAAAT,EAAA,KACAU,EAAAV,EAAA,IAEA,SAAAE,EAAAS,GAAA,OAAAA,KAAAC,WAAAD,GAAAE,QAAAF,GADAX,EAAA,KAAAE,EACAF,EAAA,UACMc,mOAkBJC,SAAW,WACTC,EAAKC,0BAGPA,qBAAuB,WACrB,IACEC,EAAIC,SAASC,uBAAuB,gBAAgB,GACpDlB,EAAIiB,SAASC,uBAAuB,gBAAgB,YAClDF,OACAV,EAAAa,aAAYH,GAAGhB,EAAI,IACrBgB,EAAEI,UAAUC,IAAI,SAChBrB,EAAEoB,UAAUC,IAAI,WAEdJ,SAASK,gBAAgBC,UAAY,MACvCP,EAAEI,UAAUI,OAAO,SACnBxB,EAAEoB,UAAUI,OAAO,aAAAC,EAGvBC,UAAY,WAAM,IAAAC,EACmBb,EAAKc,MAAhCC,EADQF,EACRE,IAAcC,EADNH,EACHI,MAASD,OACtB,OAAOE,EAAEC,QAAQJ,aAAMA,EAAIC,EAAOD,kHA/BlCK,KAAKN,MAAMO,SAASD,KAAKN,MAAMG,MAAMD,OAAOD,iDAI5CO,OAAOC,iBAAiB,SAAUH,KAAKrB,gBAAUyB,IAAA,uBAAAC,MAAA,WAIjDH,OAAOI,oBAAoB,SAAUN,KAAKrB,gBAAUyB,IAAA,SAAAC,MAAA,WA0B7C,IAAAE,EACgDP,KAAKN,MAApDC,EADDY,EACCZ,IAAMa,EADPD,EACOC,iBAA4BZ,EADnCW,EACyBV,MAAUD,OAC1C,OACEI,KAAKR,YACHiB,EAAAhC,QAAAiC,cAACpC,EAAAqC,QAAD,MACAF,EAAAhC,QAAAiC,cAAA,OAAKE,UAAU,OACbH,EAAAhC,QAAAiC,cAAA,MAAIE,UAAU,kBAAmBjB,EAAIC,EAAOD,KAAKkB,MACjDJ,EAAAhC,QAAAiC,cAACrC,EAAAyC,aAAYN,iBAAoBA,IACjCC,EAAAhC,QAAAiC,cAACK,EAAAtC,SAAMkB,IAAKA,EAAIC,EAAOD,cAjD3BjB,CAAYsC,aAAZtC,EACGuC,WACLtB,IAAKuB,UAAUC,OAAOC,WACtBZ,iBAAkBU,UAAUC,OAAOC,yBAyDvBpD,EAAAqD,SALQ,SAAAC,GAAA,OACpB3B,OAAK1B,EAAAsD,WAAUD,GACfd,iBAAkBc,EAAMd,oBAGeP,qBAzDJmB,CAyDgB1C","file":"0-bundle.js","sourcesContent":["import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport  { fetchSet } from '../actions/index';\r\nimport PropTypes from 'prop-types';\r\nimport Cards from \"./cards\";\r\nimport { filterSet } from \"../actions/index\";\r\nimport { getPosition } from \"../utils\";\r\nimport { SetControls } from \"../components/set/SetControls\";\r\nimport { Spinner } from \"../components/card/icons/spinner\";\r\nimport { zoomInCards } from \"../components/symbols\";\r\nimport Zoom from \"../components/card/icons/Zoom\"\r\nclass Set extends Component {\r\n  static propTypes = {\r\n    set: PropTypes.object.isRequired,\r\n    visibilityFilter: PropTypes.object.isRequired,\r\n  };\r\n\r\n  componentWillMount() {\r\n    this.props.fetchSet(this.props.match.params.set);\r\n\r\n  }\r\n  componentDidMount() {\r\n    window.addEventListener('scroll', this.onScroll, false);\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    window.removeEventListener('scroll', this.onScroll, false);\r\n  }\r\n\r\n  onScroll = () => {\r\n    this.toggleFilterBarOnTop();\r\n  };\r\n\r\n  toggleFilterBarOnTop = () => {\r\n    let\r\n      x = document.getElementsByClassName(\"filtersGroup\")[0],\r\n      y = document.getElementsByClassName(\"filterScroll\")[0];\r\n    if (x===undefined) return;\r\n    if (getPosition(x).y < 0) {\r\n      x.classList.add(\"fixed\");\r\n      y.classList.add(\"active\")\r\n    }\r\n    if (document.documentElement.scrollTop < 164) {\r\n      x.classList.remove(\"fixed\");\r\n      y.classList.remove(\"active\")\r\n    }\r\n  };\r\n  isLoading = () => {\r\n    const { set, match : {params } } = this.props;\r\n    return _.isEmpty(set)||set[params.set]===undefined\r\n  };\r\n\r\n  render() {\r\n    const { set , visibilityFilter, match : { params } } = this.props;\r\n    return (\r\n      this.isLoading() ?\r\n        <Spinner/> :\r\n        <div className=\"set\">\r\n          <h1 className=\"titleContainer\">{ set[params.set].name }</h1>\r\n          <SetControls visibilityFilter = {visibilityFilter}/>\r\n          <Cards set={set[params.set]} />\r\n        </div>\r\n    )\r\n  }\r\n}\r\n\r\nconst mapStateToProps = state => (\r\n  { set: filterSet(state),\r\n    visibilityFilter: state.visibilityFilter}\r\n);\r\n\r\nexport default  connect(mapStateToProps, { fetchSet })(Set);\r\n"],"sourceRoot":""}